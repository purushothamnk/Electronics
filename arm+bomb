#define yAxis_pin A0 // Joysticks Y-axis
#define xAxis_pin A1 // Joysticks X-axis

#define enA 5
#define in1 6
#define in2 7

#define in3 8
#define in4 9
#define enB 10

int motorSpeedA = 0;
int motorSpeedB = 0;
const byte npulse = 13; // number of pulses to charge the capacitor before each measurement
 
const byte pin_pulse = A2; // sends pulses to charge the capacitor (can be a digital pin)
const byte pin_cap  = A3; // measures the capacitor charge
const byte pin_LED = 13;

void setup(){

pinMode(xAxis_pin, INPUT);
pinMode(yAxis_pin, INPUT);


  pinMode(pin_pulse, OUTPUT);
  digitalWrite(pin_pulse, LOW);
  pinMode(pin_cap, INPUT);
  pinMode(pin_LED, OUTPUT);
  digitalWrite(pin_LED, LOW);

  
pinMode(enA, OUTPUT);
pinMode(in1, OUTPUT);
pinMode(in2, OUTPUT);
pinMode(in3, OUTPUT);
pinMode(in4, OUTPUT);
pinMode(enB, OUTPUT);
Serial.begin(9600);
delay(100);
}
const int nmeas = 256; //measurements to take
long int sumsum = 0; //running sum of 64 sums
long int skip = 0; //number of skipped sums
long int diff = 0;      //difference between sum and avgsum
long int flash_period = 0; //period (in ms)
long unsigned int prev_flash = 0;


void loop(){ 

  
int xAxis = analogRead(xAxis_pin); // Read Joysticks X-axis
int yAxis = analogRead(yAxis_pin); // Read Joysticks Y-axis
Serial.print("X= ");
Serial.print(xAxis);
Serial.print(" \t Y= ");
Serial.println(yAxis);
  run1(); 

// If joystick stays in middle the motors are not moving
if(xAxis > 470 && xAxis <550 && yAxis > 470 && yAxis <550){Stop();}

if (xAxis > 470 && xAxis <550){    
// Y-axis used for left and right control
if (yAxis < 470){turnRight();
// Convert the declining Y-axis readings for going backward from 470 to 0 into 0 to 255 value for the PWM signal for increasing the motor speed  
motorSpeedA = map(yAxis, 470, 0, 0, 255);
motorSpeedB = map(yAxis, 470, 0, 0, 255);    
}

if (yAxis > 550) {turnLeft();
// Convert the increasing Y-axis readings for going forward from 550 to 1023 into 0 to 255 value for the PWM signal for increasing the motor speed      
motorSpeedA = map(yAxis, 550, 1023, 0, 255);
motorSpeedB = map(yAxis, 550, 1023, 0, 255); 
}

}else{

if (yAxis > 470 && yAxis <550){   
// X-axis used for forward and backward control  
if (xAxis < 470){forword();}
if (xAxis > 550){backword();}

if (xAxis < 470){
// Convert the declining X-axis readings for going backward from 470 to 0 into 0 to 255 value for the PWM signal for increasing the motor speed  
motorSpeedA = map(xAxis, 470, 0, 0, 255);
motorSpeedB = map(xAxis, 470, 0, 0, 255); 
}

if (xAxis > 550){
// Convert the increasing X-axis readings for going forward from 550 to 1023 into 0 to 255 value for the PWM signal for increasing the motor speed      
motorSpeedA = map(xAxis, 550, 1023, 0, 255);
motorSpeedB = map(xAxis, 550, 1023, 0, 255);
 }
 
}else{

if(xAxis < 470){forword();}
if(xAxis > 550){backword();}

if(yAxis < 470){
    // Convert the declining Y-axis readings from 470 to 0 into increasing 0 to 255 value
    int yMapped = map(yAxis, 470, 0, 0, 255);
    
    // Move to left - decrease left motor speed, increase right motor speed
    motorSpeedA = motorSpeedA + yMapped;
    motorSpeedB = motorSpeedB - yMapped;
    
    // Confine the range from 0 to 255
    if(motorSpeedA > 255) {motorSpeedA = 255;}
    if(motorSpeedB > 70){motorSpeedB = 70;}
}
 
if (yAxis > 550){
    // Convert the increasing Y-axis readings from 550 to 1023 into 0 to 255 value
    int yMapped = map(yAxis, 550, 1023, 0, 255);
    
    // Move right - decrease right motor speed, increase left motor speed
    motorSpeedA = motorSpeedA - yMapped;
    motorSpeedB = motorSpeedB + yMapped;
    
    // Confine the range from 0 to 255
    if(motorSpeedA < 70){motorSpeedA = 70;}
    if(motorSpeedB > 255){motorSpeedB = 255;}
  }
 } 
}

// Prevent buzzing at low speeds (Adjust according to your motors. My motors couldn't start moving if PWM value was below value of 70)
if(motorSpeedA < 70){motorSpeedA = 0;}
if(motorSpeedB < 70){motorSpeedB = 0;}
  
analogWrite(enA, motorSpeedA); // Send PWM signal to motor A
analogWrite(enB, motorSpeedB); // Send PWM signal to motor B

delay(1);
}
void run1(){
  Serial.print("H");
  int minval = 2000;
  int maxval = 0;
 
  //perform measurement
  long unsigned int sum = 0;
  for (int imeas = 0; imeas < nmeas + 2; imeas++) {
    //reset the capacitor
    pinMode(pin_cap, OUTPUT);
    digitalWrite(pin_cap, LOW);
    delayMicroseconds(20);
    pinMode(pin_cap, INPUT);
    //apply pulses
    for (int ipulse = 0; ipulse < npulse; ipulse++) {
      digitalWrite(pin_pulse, HIGH); //takes 3.5 microseconds
      delayMicroseconds(3);
      digitalWrite(pin_pulse, LOW); //takes 3.5 microseconds
      delayMicroseconds(3);
    }
    //read the charge on the capacitor
    int val = analogRead(pin_cap); //takes 13x8=104 microseconds
    minval = min(val, minval);
    maxval = max(val, maxval);
    sum += val;
 
    //determine if LEDs should be on or off
    long unsigned int timestamp = millis();
    byte ledstat = 0;
    if (timestamp < prev_flash +12) {
      if (diff > 0)ledstat = 1;
      if (diff < 0)ledstat = 2;
    }
    if (timestamp > prev_flash + flash_period) {
      if (diff > 0)ledstat = 1;
      if (diff < 0)ledstat = 2;
      prev_flash = timestamp;
    }
    if (flash_period > 1000)ledstat = 0;
 
    //switch the LEDs to this setting
    if (ledstat == 0) {
      digitalWrite(pin_LED, LOW);
    }
    if (ledstat == 1) {
      digitalWrite(pin_LED, LOW);
    }
    if (ledstat == 2) {
      digitalWrite(pin_LED, HIGH);
    }
 
  }
 
  //subtract minimum and maximum value to remove spikes
  sum -= minval; sum -= maxval;
 
  //process
  if (sumsum == 0) sumsum = sum << 6; //set sumsum to expected value
  long int avgsum = (sumsum + 32) >> 6;
  diff = sum - avgsum;
  if (abs(diff)<avgsum >> 10) {   //adjust for small changes
    sumsum = sumsum + sum - avgsum;
    skip = 0;
  } else {
    skip++;
  }
  if (skip > 64) {  // break off in case of prolonged skipping
    sumsum = sum << 6;
    skip = 0;
  }
 
  // one permille change = 2 ticks/s
  if (diff == 0) flash_period = 1000000;
  else flash_period = avgsum / (2 * abs(diff));
}   

void forword(){
// Set Motor A forward
digitalWrite(in1, HIGH);
digitalWrite(in2, LOW);
// Set Motor B forward
digitalWrite(in3, LOW);
digitalWrite(in4, HIGH);
}

void backword(){    
// Set Motor A backward
digitalWrite(in1, LOW);
digitalWrite(in2, HIGH);
// Set Motor B backward
digitalWrite(in3, HIGH);
digitalWrite(in4, LOW);
}

void turnRight(){
// Set Motor A forward
digitalWrite(in1, HIGH);
digitalWrite(in2, LOW);
// Set Motor B backward 
digitalWrite(in3, HIGH);
digitalWrite(in4, LOW);
}

void turnLeft(){
// Set Motor B backward 
digitalWrite(in1, LOW);
digitalWrite(in2, HIGH);
// Set Motor B forward 
digitalWrite(in3, LOW);
digitalWrite(in4, HIGH);
}

void Stop(){
// Set Motor A stop
digitalWrite(in1, LOW);
digitalWrite(in2, LOW);
// Set Motor B stop
digitalWrite(in3, LOW);
digitalWrite(in4, LOW);
}
